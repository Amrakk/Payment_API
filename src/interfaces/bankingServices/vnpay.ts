export interface Bank {
    /** Bank code */
    bank_code: string;
    /** Bank name */
    bank_name: string;
    /** Bank logo path */
    logo_link: string;

    bank_type: number;
    display_order: number;
}

export interface PaymentLinkRequestInput
    extends Pick<PaymentLinkRequest, "vnp_Amount" | "vnp_BankCode" | "vnp_OrderInfo" | "vnp_TxnRef"> {
    vnp_ExpireDate: number;
}

/** @see https://sandbox.vnpayment.vn/apis/docs/thanh-toan-pay/pay.html#tao-url-thanh-toan */
export interface PaymentLinkRequest {
    /** API version used by the merchant (Current: 2.1.0) */
    vnp_Version: string;
    /** API command code */
    vnp_Command: VNPAY_COMMAND.PAY;
    /** Merchant website code */
    vnp_TmnCode: string;
    /**
     * Payment amount (multiplied by 100) [Example: 10,000 VND → send 1000000]
     *
     * NOTE: This api will auto multiply by 100
     */
    vnp_Amount: number;
    /** Payment method code. If omitted, user selects at VNPAY. */
    vnp_BankCode?: VNPAY_BANK_CODE_REQUEST | string;
    /** Transaction creation time, format: yyyyMMddHHmmss (GMT+7) */
    vnp_CreateDate: number;
    /** Currency code for the transaction. Currently only supports: VND */
    vnp_CurrCode: VNPAY_CURRENCY;
    /** IP address of the customer initiating the transaction */
    vnp_IpAddr: string;
    /** Interface language */
    vnp_Locale: SUPPORTED_LANG;
    /** Payment description. Must be plain text (no accents or special characters) */
    vnp_OrderInfo: string;
    /** Product category code as defined by VNPAY */
    vnp_OrderType: string;

    /** URL to receive the transaction result */
    vnp_ReturnUrl: string;
    /**
     * Transaction expiration time, format: yyyyMMddHHmmss (GMT+7)
     *
     * NOTE: This api will auto convert to yyyyMMddHHmmss
     */
    vnp_ExpireDate: number;
    /** Transaction reference code in the merchant system. Must be unique per day */
    vnp_TxnRef: string;
    /** Secure hash (checksum) to ensure data integrity during transmission */
    vnp_SecureHash: string;
}

export interface PaymentLinkResponse
    extends Pick<
        PaymentLinkRequest,
        "vnp_TxnRef" | "vnp_Amount" | "vnp_OrderInfo" | "vnp_ExpireDate" | "vnp_CreateDate" | "vnp_BankCode"
    > {
    /** Checkout URL */
    checkoutUrl: string;
}

/** @see https://sandbox.vnpayment.vn/apis/docs/thanh-toan-pay/pay.html#code-ipn-url */
export interface PaymentLinkCallbackRequest {
    /** Merchant website code */
    vnp_TmnCode: string;
    /** Payment amount (multiplied by 100) [Example: 10,000 VND → send 1000000] */
    vnp_Amount: number;
    /** Payment method code. If omitted, user selects at VNPAY. TODO: fix this */
    vnp_BankCode?: VNPAY_BANK_CODE_REQUEST;
    /** Transaction code at the bank */
    vnp_BankTranNo?: string;
    /** Card type */
    vnp_CardType?: VNPAY_CARD_TYPE;
    /** Transaction payment time, format: yyyyMMddHHmmss (GMT+7) */
    vnp_PayDate?: number;
    /** Payment description. Must be plain text (no accents or special characters) */
    vnp_OrderInfo: string;
    /** Transaction number at VNPay */
    vnp_TransactionNo: number;
    /** Payment result response code */
    vnp_ResponseCode: VNPAY_RESPONSE_CODE;
    /** Transaction status */
    vnp_TransactionStatus: VNPAY_TRANSACTION_STATUS;
    /** Transaction reference code in the merchant system */
    vnp_TxnRef: string;
    /** Secure hash (checksum) to ensure data integrity during transmission */
    vnp_SecureHash: string;
}

/** @see https://sandbox.vnpayment.vn/apis/docs/truy-van-hoan-tien/querydr&refund.html */
export interface TransactionStatusRequest {
    /** Unique request ID generated by merchant system */
    vnp_RequestId: string;
    /** API version being used, e.g. "2.1.0" */
    vnp_Version: string;
    /** API command code, e.g. "querydr" */
    vnp_Command: VNPAY_COMMAND.QUERYDR;
    /** Merchant code assigned by VNPAY */
    vnp_TmnCode: string;
    /** Transaction reference ID from merchant system */
    vnp_TxnRef: string;
    /** Description of the request */
    vnp_OrderInfo: string;
    /** Transaction number at VNPay */
    vnp_TransactionNo?: number;
    /** Transaction time recorded by merchant (yyyyMMddHHmmss).
     * Equals to: [
     *     vnp_CreateDate: vnp_Command=pay,
     *     vnp_create_date: vnp_Command=pay_and_create | vnp_command=token_pay
     *     ...
     * ]
     */
    vnp_TransactionDate: number;
    /** Request creation time (yyyyMMddHHmmss) */
    vnp_CreateDate: number;
    /** IP address of the API caller */
    vnp_IpAddr: string;
    /** Checksum hash to validate request integrity */
    vnp_SecureHash: string;
}

export interface TransactionStatusRequestInput
    extends Pick<
        TransactionStatusRequest,
        "vnp_RequestId" | "vnp_TxnRef" | "vnp_OrderInfo" | "vnp_TransactionNo" | "vnp_IpAddr"
    > {
    vnp_TransactionDate: number;
}

/** @see https://sandbox.vnpayment.vn/apis/docs/truy-van-hoan-tien/querydr&refund.html */
export interface TransactionStatusResponse {
    /** Unique response ID generated by VNPAY system */
    vnp_ResponseId: string;
    /** API command code, e.g. "querydr" */
    vnp_Command?: VNPAY_COMMAND.QUERYDR;
    /** Merchant code assigned by VNPAY */
    vnp_TmnCode: string;
    /** Transaction reference ID from merchant system */
    vnp_TxnRef: string;
    /** Transaction amount sent by merchant */
    vnp_Amount: number;
    /** Description of the request */
    vnp_OrderInfo: string;
    /** Response code from VNPAY system */
    vnp_ResponseCode: VNPAY_RESPONSE_CODE;
    /** Message describing the response code */
    vnp_Message: string;
    /** Payment bank or e-wallet code */
    vnp_BankCode: string;
    /** Customer payment time at VNPAY (yyyyMMddHHmmss) */
    vnp_PayDate?: string;
    /** VNPAY transaction ID */
    vnp_TransactionNo: string;
    /** Type of transaction */
    vnp_TransactionType: VNPAY_TRANSACTION_TYPE;
    /** Transaction status at VNPAY gateway */
    vnp_TransactionStatus: VNPAY_TRANSACTION_STATUS;
    /** Promotion code applied by customer, if any */
    vnp_PromotionCode?: string;
    /** Promotion amount applied, if any */
    vnp_PromotionAmount?: string;
    /** Checksum hash to validate response integrity */
    vnp_SecureHash: string;
}

export enum VNPAY_BANK_CODE_REQUEST {
    /** Somehow this is not supported in the API although this is noted in the documentation */
    // VNPAYQR = "VNPAYQR",
    /** This behaves as vnp_BankCode undefined and maybe deprecated */
    QR = "QR",
    VNBANK = "VNBANK",
    INTCARD = "INTCARD",
    /** Retrieve the bank code using the `get_banks` route with the query parameter `service=vnpay` */
}

export enum VNPAY_CARD_TYPE {
    ATM = "ATM",
    QRCODE = "QRCODE",
}

export enum VNPAY_RESPONSE_CODE {
    SUCCESS = "00",
    OTHER_ERROR = "99",

    /** IPN and Return URL */
    SUSPICIOUS = "07",
    UNREGISTERED_INTERNET_BANKING = "09",
    AUTH_FAILED_3_TIMES = "10",
    PAYMENT_TIMEOUT = "11",
    ACCOUNT_LOCKED = "12",
    INVALID_OTP = "13",
    CUSTOMER_CANCELED = "24",
    INSUFFICIENT_FUNDS = "51",
    DAILY_LIMIT_EXCEEDED = "65",
    BANK_MAINTENANCE = "75",
    PASSWORD_RETRY_EXCEEDED = "79",

    /** Querydr and Refund */
    INVALID_TMN_CODE = "02",
    INVALID_DATA_FORMAT = "03",
    TRANSACTION_NOT_FOUND = "91",
    INVALID_CHECKSUM = "97",

    /** Querydr */
    DUPLICATE_REQUEST = "94",

    /** Refund */
    REFUND_REQUEST_ALREADY_PROCESSING = "94",
    REFUND_REQUEST_REJECTED = "95",
}

export enum VNPAY_TRANSACTION_STATUS {
    SUCCESS = "00",
    PENDING = "01",
    FAILED = "02",
    REVERSED = "04",
    REFUND_PROCESSING = "05",
    REFUND_REQUESTED_TO_BANK = "06",
    FRAUD_SUSPICION = "07",
    REFUND_REJECTED = "09",
}

export enum VNPAY_TRANSACTION_TYPE {
    PAY = "01",
    REFUND = "02",
    PARTIAL_REFUND = "03",
}

export enum SUPPORTED_LANG {
    VN = "vn",
    EN = "en",
}

export enum VNPAY_COMMAND {
    PAY = "pay",
    REFUND = "refund",
    QUERYDR = "querydr",

    TOKEN_PAY = "token_pay",
    TOKEN_REMOVE = "token_remove",
    TOKEN_CREATE = "token_create",
    PAY_AND_CREATE = "pay_and_create",
}

export enum VNPAY_CURRENCY {
    VND = "VND",
}

export enum VNPAY_ORDER_TYPE {
    // TODO: implement more types when needed
    OTHER = "other",
}

export enum IpnRspCode {
    Success = "00",
    OrderNotFound = "01",
    OrderAlreadyConfirmed = "02",
    IpProhibited = "03",
    InvalidAmount = "04",
    FailChecksum = "97",
    UnknownError = "99",
}

export type IpnResponse = {
    RspCode: IpnRspCode;
    Message: string;
};

export const IpnResponses = new Map<IpnRspCode, IpnResponse>([
    [IpnRspCode.Success, { RspCode: IpnRspCode.Success, Message: "Confirm Success" }],
    [IpnRspCode.OrderNotFound, { RspCode: IpnRspCode.OrderNotFound, Message: "Order not found" }],
    [
        IpnRspCode.OrderAlreadyConfirmed,
        { RspCode: IpnRspCode.OrderAlreadyConfirmed, Message: "Order already confirmed" },
    ],
    [IpnRspCode.IpProhibited, { RspCode: IpnRspCode.IpProhibited, Message: "IP prohibited" }],
    [IpnRspCode.InvalidAmount, { RspCode: IpnRspCode.InvalidAmount, Message: "Invalid amount" }],
    [IpnRspCode.FailChecksum, { RspCode: IpnRspCode.FailChecksum, Message: "Fail checksum" }],
    [IpnRspCode.UnknownError, { RspCode: IpnRspCode.UnknownError, Message: "Unknown error" }],
]);
